#!python3

"""
Load the author list and database from the support directory and
convert it to an author tex file using AASTeX6.1 syntax.

  python3 support/db2authors.py > authors.tex

This program requires the "yaml" package to be installed.

"""
from __future__ import print_function
import os
import sys
import os.path
import re
import yaml

# Set to True to write a comma separated list of authors
WRITE_CSV = False

# There is a file listing all the authors and a file mapping
# those authors to full names and affiliations

# This is the author list. It's a yaml file with authorID that
# maps to the database file below
authorfile = os.path.join("support", "authors.yaml")

with open(authorfile, "r") as fh:
    authors = yaml.safe_load(fh)

# This is the database file with all the generic information
# about authors
dbfile = os.path.join("support", "authordb.yaml")

with open(dbfile, "r") as fh:
    authordb = yaml.safe_load(fh)

# author db is dict indexed by author id.
# Each entry is a dict with keys
# name: Surname
# initials: A.B.
# orcid: ORCID (can be None)
# affil: List of affiliation labels
# altaffil: List of alternate affiliation text
authorinfo = authordb["authors"]

# dict of all the affiliations, key is a label
# used in author list
affil = authordb["affiliations"]

# AASTeX6.1 author files are of the form:
# \author[ORCID]{Initials~Surname}
# \altaffiliation{Hubble Fellow}   * must come straight after author
# \affiliation{Affil1}
# \affiliation{Affill2}
# Do not yet handle \email or \correspondingauthor

if WRITE_CSV:
    # Used for arXiv submission
    names = ["{auth[initials]} {auth[name]}".format(auth=a) for a in authors]
    print(", ".join(names))
    sys.exit(0)

print("""%% DO NOT EDIT THIS FILE. IT IS GENERATED FROM db2authors.py"
%% Regenerate using:
%%    python support/db2authors.py > authors.tex
""")
print()

for authorid in authors:
    orcid = ""

    try:
        auth = authorinfo[authorid]
    except KeyError as e:
        raise RuntimeError(f"Author ID {authorid} now defined in author database.") from e

    if "orcid" in auth and auth["orcid"]:
        orcid = "[{}]".format(auth["orcid"])

    # For spaces in surnames use a ~
    surname = re.sub(r"\s+", "~", auth["name"])

    # Preference for A.~B.~Surname rather than A.B.~Surname
    initials = re.sub(r"\.(\w)", lambda m: ".~" + m.group(1), auth["initials"])

    # For spaces in initials use a ~
    initials = re.sub(r"\s+", "~", initials)

    print(r"\author{}{{{}~{}}}".format(orcid, initials, surname))
    if "altaffil" in auth:
        for af in auth["altaffil"]:
            print(r"\altaffiliation{{{}}}".format(af))

    # The affiliations have to be retrieved via label
    for aflab in auth["affil"]:
        print(r"\affiliation{{{}}}".format(affil[aflab]))

    print()
